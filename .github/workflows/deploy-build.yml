name: Deploy Build

on:
  push:
#  workflow_run:
#    workflows: ["Update Build Version"]
#    types: [completed]

env:
  LATEST_IMAGE: ${{ secrets.DOCKER_REPO_URL }}:latest-${{ github.sha }}

jobs:
  create-image:
    runs-on: ubuntu-latest

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ env.LATEST_IMAGE }}

  # For this deploy to work correctly, the EC2 instance needs to have docker and docker-compose installed
  # Then make sure the docker daemon is running
  # Also make sure to create a docker group on the EC2 instance before running docker commands, otherwise
  # the EC2 instance won't have permissions for those docker commands (without using sudo for linux)
  EC2-deploy:
    needs: create-image
    runs-on: ubuntu-latest

    env:
      ENV_CONFIG_PATH: envs/testing/
      ENV_CONFIG_FILE: settings.yml
      ENV_REPO_CHECKOUT_PATH: temp_folder
      REPO_CHECKOUT_PATH: portfolio
      EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
      EC2_IP: ${{ secrets.EC2_DEV_IP }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

    steps:
      - name: set current runner path as env var
        run: |
          echo "WORK_DIR=$(pwd)" >> "$GITHUB_ENV"

      - name: setup yq
        uses: mikefarah/yq@master

      - name: checkout repo
        uses: actions/checkout@v4

      - name: checkout settings file
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.ENVIRONMENT_REPO_URL }}
          path: ${{ env.ENV_REPO_CHECKOUT_PATH }}
          ref: "main"

      - name: get port and protocol settings
        run: |
          cd $ENV_REPO_CHECKOUT_PATH
          cd $ENV_CONFIG_PATH
          BASE_SETTINGS=$(yq '.resources' $ENV_CONFIG_FILE)
          PORT=$(yq '.deployment.ports.port' $BASE_SETTINGS)
          NETWORK_PROTOCOL=$(yq '.deployment.ports.protocol' $BASE_SETTINGS)
          echo "PORT=$PORT" >> "$GITHUB_ENV"
          echo "NETWORK_PROTOCOL=$NETWORK_PROTOCOL" >> "$GITHUB_ENV"
      
      - name: set ssh identity on github runner
        run: |
          mkdir -p $SSH_DIR
          chmod -R 400 $SSH_DIR
          cd $SSH_DIR
          ssh-keyscan -H $EC2_IP > known_hosts
          eval `ssh-agent -s`
          echo "$SSH_KEY" | tr -d '\r' | ssh-add -
          ssh ${EC2_USERNAME}@${EC2_IP} "echo Test is this working"

        env:
          SSH_KEY: ${{ secrets.DEV_SSH_PRIVATE_KEY }}
          SSH_DIR: ~/.ssh/
          SSH_PRIVATE_KEY_FILE: id_rsa
          KNOWN_HOSTS: ${{ secrets.DEV_KNOWN_HOSTS }}

      - name: set env variables for docker-compose
        run: |
          cd ${WORK_DIR}
          echo "LATEST_IMAGE=$LATEST_IMAGE" >> .env
          echo "PORT=$PORT" >> .env
          echo "NGINX_ENVSUBST_TEMPLATE_DIR=${ENV_REPO_CHECKOUT_PATH}/nginx-config/" >> .env
 
      - name: run commands on ec2 through ssh
        run: |
          docker context create $EC2_CONTEXT --docker "host=ssh://${EC2_USERNAME}@${EC2_IP}"
          docker context use $EC2_CONTEXT
          docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
          docker-compose down
          docker-compose up

        env:
          EC2_CONTEXT: ec2